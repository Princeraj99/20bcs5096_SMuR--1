library(Rcpp); library(data.table); library(dplyr); library(lubridate);  
library(tidyr); library(ggplot2); library(reshape2); library(caret);

src <- '
#include "memcached_monitoring_library.h"
DataFrame get_metrics(CharacterVector servers){
  DataFrame out = memcached_monitoring_library::get_metrics(as<std::vector<std::string>>(servers));
  return out;  
}'

get_metrics <- cppFunction(src)

servers <- c("server1", "server2", "server3")  
data <- get_metrics(servers)

str(data) 
summary(data)
ggplot(data, aes(x = timestamp)) + geom_density()

data <- data %>%  
  tidyr::drop_na() %>%
  dplyr::filter(!is_outlier(.)) %>% 
  dplyr::select(-ID) # Remove unnecessary vars

data <- data %>%
  mutate(
    timestamp = lubridate::ymd_hms(timestamp),
    access_freq = as.numeric(dplyr::count(timestamp)), 
    data_size = rnorm(n(), mean = 500, sd = 50), # Simulate 
    server_load = runif(n(), min = 0, max = 100) # Simulate
  )

set.seed(1)
kmeans_vars <- c("access_freq", "data_size", "server_load")

clusters <- kmeans(select(data, kmeans_vars), 3)

data$cluster <- clusters$cluster 

analysis <- lapply(1:3, function(i){
  
  cluster_data <- dplyr::filter(data, cluster == i)
  
  print(paste0("Cluster ", i, " characteristics: \n"))
  print(summary(cluster_data))
  
  ggplot(cluster_data, aes(x = access_freq)) + 
    geom_density()
})

write.csv(analysis, file = "cluster_analysis.csv")
